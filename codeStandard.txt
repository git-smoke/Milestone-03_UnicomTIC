# Project Management Web Application Coding Standards

## 1. General Principles
- Write clean, readable, and maintainable code
- Follow consistent naming conventions
- Prioritize code readability over cleverness
- Write self-documenting code with meaningful names
- Keep functions and components small and focused
- Use TypeScript for type safety

## 2. Naming Conventions

### 2.1 General Naming
- Use camelCase for variables and functions
- Use PascalCase for class names, React components, and interfaces
- Use UPPER_SNAKE_CASE for constants
- Avoid abbreviations and acronyms unless widely understood

### 2.2 Specific Conventions
- Components: `UserProfile`, `IssueCard`
- Interfaces: `IUser`, `IssueProps`
- Utility functions: `formatDate`, `validateEmail`
- Hooks: `useFetch`

## 3. File and Folder Structure
```
├── /components
│   ├── /common
│   ├── /issues
│   └── /projects
├── /hooks
├── /lib
│   ├── /utils
│   └── /validation
├── /pages
├── /prisma
│   └── schema.prisma
├── /services
│   ├── /api
│   └── /auth
└── /types
```

## 4. TypeScript Best Practices
- Always use explicit type annotations
- Prefer interfaces over type aliases for object shapes
- Use union types and type guards
- Avoid `any` type
- Use optional chaining and nullish coalescing

```typescript
interface IUser {
  id: string;
  name?: string;
  email: string;
}

// Good type usage
const processUser = (user: IUser | null) => {
  return user?.name ?? 'Anonymous';
};
```

## 5. React Component Guidelines
- Use functional components with hooks
- Separate container and presentational components
- Keep components small and focused (max 150 lines)
- Use prop destructuring
- Prefer arrow functions for components

```typescript
interface IssueCardProps {
  issue: IIssue;
  onEdit: (issueId: string) => void;
}

const IssueCard: React.FC<IssueCardProps> = ({ issue, onEdit }) => {
  return (
    <div className="issue-card">
      {/* Component implementation */}
    </div>
  );
};
```

## 6. State Management
- Use React Context for global state
- Utilize `useState` and `useReducer` for local state
- Implement custom hooks for complex state logic
- Consider Zustand or Redux for complex applications

## 7. Error Handling
- Use try-catch blocks for async operations
- Create custom error classes
- Implement global error boundary
- Log errors with context

```typescript
class ApiError extends Error {
  constructor(
    public statusCode: number,
    message: string
  ) {
    super(message);
  }
}

const fetchData = async () => {
  try {
    // API call
  } catch (error) {
    if (error instanceof ApiError) {
      // Handle specific API errors
    }
  }
};
```

## 8. API and Service Layer
- Use axios or fetch with typed responses
- Create service classes for API interactions
- Implement interceptors for common headers and error handling
- Use environment variables for API endpoints

## 9. Authentication
- Implement role-based access control
- Use Clerk for authentication
- Store minimal user information
- Implement secure token management

## 10. Performance Optimization
- Use React.memo for component memoization
- Implement code splitting
- Optimize database queries
- Use server-side rendering where appropriate

## 11. Testing
- Aim for 70%+ test coverage
- Use Jest and React Testing Library
- Write unit tests for utilities and hooks
- Implement integration tests for critical flows

## 12. Prisma Best Practices
- Use transactions for complex database operations
- Implement soft delete instead of hard delete
- Create database indexes for frequently queried fields
- Use Prisma migrations for schema changes

## 13. Code Quality Tools
- ESLint for linting
- Prettier for code formatting
- TypeScript strict mode
- Husky for pre-commit hooks

## 14. Security Considerations
- Validate and sanitize all user inputs
- Implement CSRF protection
- Use HTTPS
- Avoid storing sensitive information in client-side storage

## 15. Logging and Monitoring
- Use structured logging
- Implement error tracking (Sentry)
- Log important events and errors
- Use environment-based logging levels

## 16. Documentation
- Add JSDoc comments for complex functions
- Maintain a README.md with setup instructions
- Document architectural decisions
- Use inline comments sparingly

---
